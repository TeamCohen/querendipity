//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.01.27 at 01:36:27 PM EST 
//


package nies.ui.vocabulary;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Configuration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Configuration">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="tabs" type="{}TabListings"/>
 *         &lt;element name="type" type="{}TypeDescription" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement(name="configuration")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Configuration", propOrder = {
    "tabs",
    "type"
})
public class Configuration {
	private static Map<String,TypeDescription> typemap = new HashMap<String,TypeDescription>();
	public static void set(String name, TypeDescription td) {
		typemap.put(name, td);
	}
	public static TypeDescription get(String name) { 
		return typemap.get(name); 
	}
	
	/** Factory for automatically unmarshalling a Configuration object from 
	 * an XML file.  The returned Configuration object is already type-registered
	 * and ready to use immediately.
	 * @param filename The XML file to parse
	 * @return The unmarshalled Java model of the configuration file.
	 * @throws JAXBException if unmarshalling fails for some reason.
	 * @throws FileNotFoundException if it can't locate the XML file.
	 */
	public static Configuration configure(String filename) throws JAXBException, FileNotFoundException  {
		JAXBContext context = JAXBContext.newInstance(Configuration.class);
		Unmarshaller um = context.createUnmarshaller();
		Configuration c = (Configuration) um.unmarshal(new FileReader(filename));
		c.registerTypes();
		return c;
	}

	/** Enters all known types in a central registry.  If you are generating
	 * a Configuration object by calling the JAXB methods by hand (and not by
	 * using the provided factory method), you must call this on the
	 * resulting Configuration object if you want Attributes to properly map to their Types!
	 */
	public void registerTypes() {
		for (TypeDescription td : this.type) {
			Configuration.set(td.getName(), td);
		}
	}
	
    @XmlElement(required = true)
    protected TabListings tabs;
    @XmlElement(required = true)
    protected List<TypeDescription> type;

    /**
     * Gets the value of the tabs property.
     * 
     * @return
     *     possible object is
     *     {@link TabListings }
     *     
     */
    public TabListings getTabs() {
        return tabs;
    }

    /**
     * Sets the value of the tabs property.
     * 
     * @param value
     *     allowed object is
     *     {@link TabListings }
     *     
     */
    public void setTabs(TabListings value) {
        this.tabs = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the type property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TypeDescription }
     * 
     * 
     */
    public List<TypeDescription> getType() {
        if (type == null) {
            type = new ArrayList<TypeDescription>();
        }
        return this.type;
    }

}
